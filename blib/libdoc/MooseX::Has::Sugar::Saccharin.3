.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Has::Sugar::Saccharin 3"
.TH MooseX::Has::Sugar::Saccharin 3 "2012-08-03" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Has::Sugar::Saccharin \- Experimental sweetness
.SH "VERSION"
.IX Header "VERSION"
version 0.05070421
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is a highly experimental sugaring module. No Guarantees of stability.
.PP
.Vb 4
\&    use MooseX::Types::Moose qw( :all );
\&    has name   => rw Str, default { 1 };
\&    has suffix => required rw Str;
\&    has \*(Aqsuffix\*(Aq, required rw Str;
.Ve
.PP
Your choice.
.SH "EXPORT GROUPS"
.IX Header "EXPORT GROUPS"
.SS ":default"
.IX Subsection ":default"
exports  \*(L"ro\*(R", \*(L"rw\*(R", \*(L"required\*(R", \*(L"lazy\*(R", \*(L"lazy_build\*(R", \*(L"coerce\*(R", \*(L"weak_ref\*(R", \*(L"auto_deref\*(R",
      \*(L"bare\*(R", \*(L"default\*(R", \*(L"init_arg\*(R", \*(L"predicate\*(R", \*(L"clearer\*(R", \*(L"builder\*(R", \*(L"trigger\*(R",
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "bare"
.IX Subsection "bare"
.ie n .SS "bare $Type"
.el .SS "bare \f(CW$Type\fP"
.IX Subsection "bare $Type"
.Vb 1
\&    bare Str
.Ve
.PP
equivalent to this
.PP
.Vb 1
\&    is => \*(Aqbare\*(Aq, isa => Str
.Ve
.SS "ro"
.IX Subsection "ro"
.ie n .SS "ro $Type"
.el .SS "ro \f(CW$Type\fP"
.IX Subsection "ro $Type"
.Vb 1
\&    ro Str
.Ve
.PP
equivalent to this
.PP
.Vb 1
\&    is => \*(Aqro\*(Aq, isa => Str,
.Ve
.SS "rw"
.IX Subsection "rw"
.ie n .SS "rw $Type"
.el .SS "rw \f(CW$Type\fP"
.IX Subsection "rw $Type"
.Vb 1
\&    rw Str
.Ve
.PP
equivalent to this
.PP
.Vb 1
\&    is => \*(Aqrw\*(Aq, isa => Str
.Ve
.SS "required"
.IX Subsection "required"
.ie n .SS "required @rest"
.el .SS "required \f(CW@rest\fP"
.IX Subsection "required @rest"
this
.PP
.Vb 1
\&    required rw Str
.Ve
.PP
is equivalent to this
.PP
.Vb 1
\&    required => 1, is => \*(Aqrw\*(Aq, isa => Str,
.Ve
.PP
this
.PP
.Vb 1
\&    rw Str, required
.Ve
.PP
is equivalent to this
.PP
.Vb 1
\&    is => \*(Aqrw\*(Aq, isa => Str , required => 1
.Ve
.SS "lazy"
.IX Subsection "lazy"
.ie n .SS "lazy @rest"
.el .SS "lazy \f(CW@rest\fP"
.IX Subsection "lazy @rest"
like \f(CW\*(C`( lazy => 1 , @rest )\*(C'\fR
.SS "lazy_build"
.IX Subsection "lazy_build"
.ie n .SS "lazy_build @rest"
.el .SS "lazy_build \f(CW@rest\fP"
.IX Subsection "lazy_build @rest"
like \f(CW\*(C`( lazy_build => 1, @rest )\*(C'\fR
.SS "weak_ref"
.IX Subsection "weak_ref"
.ie n .SS "weak_ref @rest"
.el .SS "weak_ref \f(CW@rest\fP"
.IX Subsection "weak_ref @rest"
like \f(CW\*(C`( weak_ref => 1, @rest )\*(C'\fR
.SS "coerce"
.IX Subsection "coerce"
.ie n .SS "@rest"
.el .SS "\f(CW@rest\fP"
.IX Subsection "@rest"
like \f(CW\*(C`( coerce => 1, @rest )\*(C'\fR
.PP
\fI\s-1WARNING:\s0\fR
.IX Subsection "WARNING:"
.PP
Conflicts with \f(CW\*(C`MooseX::Types\*(Aqs\*(C'\fR \f(CW\*(C`coerce\*(C'\fR method
.SS "auto_deref"
.IX Subsection "auto_deref"
.ie n .SS "auto_deref @rest"
.el .SS "auto_deref \f(CW@rest\fP"
.IX Subsection "auto_deref @rest"
like \f(CW\*(C`( auto_deref => 1, @rest )\*(C'\fR
.SS "builder"
.IX Subsection "builder"
.ie n .SS "builder $buildername:"
.el .SS "builder \f(CW$buildername:\fP"
.IX Subsection "builder $buildername:"
.Vb 1
\&    required rw Str, builder \*(Aq_build_foo\*(Aq
.Ve
.PP
is like
.PP
.Vb 1
\&    builder => \*(Aq_build_foo\*(Aq
.Ve
.SS "predicate"
.IX Subsection "predicate"
.ie n .SS "predicate $predicatename"
.el .SS "predicate \f(CW$predicatename\fP"
.IX Subsection "predicate $predicatename"
see \*(L"builder\*(R"
.SS "clearer"
.IX Subsection "clearer"
.ie n .SS "clearer $clearername"
.el .SS "clearer \f(CW$clearername\fP"
.IX Subsection "clearer $clearername"
see \*(L"builder\*(R"
.SS "init_arg"
.IX Subsection "init_arg"
.ie n .SS "init_arg $argname"
.el .SS "init_arg \f(CW$argname\fP"
.IX Subsection "init_arg $argname"
see \*(L"builder\*(R"
.SS "default"
.IX Subsection "default"
.ie n .SS "default { $code }"
.el .SS "default { \f(CW$code\fP }"
.IX Subsection "default { $code }"
Examples:
.PP
.Vb 4
\&    default { 1 }
\&    default { { } }
\&    default { [ ] }
\&    default { $_\->otherfield }
.Ve
.PP
\&\f(CW$_\fR is localised as the same value as \f(CW$_\fR[0] for convenience ( usually \f(CW$self\fR )
.SS "trigger"
.IX Subsection "trigger"
.ie n .SS "trigger { $code }"
.el .SS "trigger { \f(CW$code\fP }"
.IX Subsection "trigger { $code }"
Works exactly like default.
.SH "CONFLICTS"
.IX Header "CONFLICTS"
.SS "MooseX::Has::Sugar"
.IX Subsection "MooseX::Has::Sugar"
.SS "MooseX::Has::Sugar::Minimal"
.IX Subsection "MooseX::Has::Sugar::Minimal"
This module is not intended to be used in conjunction with
 ::Sugar or ::Sugar::Minimal
.PP
We export many of the same symbols and its just not very sensible.
.SS "MooseX::Types"
.IX Subsection "MooseX::Types"
.SS "Moose::Util::TypeConstraints"
.IX Subsection "Moose::Util::TypeConstraints"
due to exporting the \*(L"coerce\*(R" symbol, using us in the same scope as a call to
.PP
.Vb 1
\&    use MooseX::Types ....
.Ve
.PP
or
    use Moose::Util::TypeConstraints
.PP
will result in a symbol collision.
.PP
We recommend using and creating proper type libraries instead, ( which will absolve you entirely of the need to use MooseX::Types and MooseX::Has::Sugar(::*)? in the same scope )
.SS "Perl 5.010 feature 'switch'"
.IX Subsection "Perl 5.010 feature 'switch'"
the keyword 'default' becomes part of Perl in both these cases:
.PP
.Vb 2
\&    use 5.010;
\&    use feature qw( :switch );
.Ve
.PP
As such, we can't have that keyword in that scenario.
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl at cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Kent Fredric.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
